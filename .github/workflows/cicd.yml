name: CI/CD
on:
  push:
  workflow_dispatch:

jobs:
  backend-CI:
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      - name: JDK 11 설정
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "corretto"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 빌드
        run: |
          mkdir -p src/main/resources/
          echo ${{ secrets.APPLICATION_LOCAL_YML }} | base64 -d > src/main/resources/application-local.yml
          echo ${{ secrets.APPLICATION_PROD_YML }} | base64 -d > src/main/resources/application-prod.yml
          chmod +x gradlew
          ./gradlew build
        shell: bash

      - name: AWS Credentials 설정
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        id: login-ecr
        run: aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 181299391632.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Build and push image to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          REGISTRY: 181299391632.dkr.ecr.ap-northeast-2.amazonaws.com
          REPOSITORY: unisphere-main
          IMAGE_TAG: latest
        run: |
          cp backend/build/libs/*-*.jar deploy-main/
          cd deploy-main
          docker build -t unisphere-main .
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Upload build file to S3 and trigger CodeDeploy
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          rm -rf deploy-main/*.jar
          mkdir -p deploy && cp -r deploy-main/* deploy/
          zip -r deploy.zip deploy

          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_DEPLOY_MAIN_BUCKET_NAME }}/deploy.zip

          aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODEDEPLOY_MAIN_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_MAIN_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_S3_DEPLOY_MAIN_BUCKET_NAME }},bundleType=zip,key=deploy.zip
